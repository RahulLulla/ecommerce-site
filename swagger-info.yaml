openapi: 3.0.0
info:
  title: E-Commerce API
  description: API documentation for the E-Commerce platform
  version: 1.0.0
servers:
  - url: https://api.example.com
    description: Production server
  - url: https://staging-api.example.com
    description: Staging server

paths:
  /profile:
    get:
      summary: Get user profile page
      tags:
        - Users
      responses:
        '200':
          description: Get user profile page
          
  /users:
    get:
      summary: Get all users
      tags:
        - Users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/{userId}:
    get:
      summary: Get user by ID
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: number
          description: The ID of the user
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Update user by ID
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: number
          description: The ID of the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully
    delete:
      summary: Delete user by ID
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: number
          description: The ID of the user
      responses:
        '200':
          description: User deleted successfully

  /products:
    get:
      summary: Get products
      tags:
        - Products
      parameters:
        - name: category
          in: query
          required: false
          schema:
            type: string
          description: The name of the product category
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      summary: Create products
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        '200':
          description: Creates products

  /products/{productId}:
    get:
      summary: Get product by ID
      tags:
        - Products
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: number
          description: The ID of the product
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    put:
      summary: Update product by ID
      tags:
        - Products
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: number
          description: The ID of the product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        '200':
          description: Product updated successfully
    delete:
      summary: Delete product by ID
      tags:
        - Products
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: number
          description: The ID of the product
      responses:
        '200':
          description: Product deleted successfully

  /register:
    get:
      summary: Registeration Page
      tags:
        - Users
      responses:
        '200':
          description: Returns registration page. No status code
    post:
      summary: Register a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: Checks username avalability and if available User is registered successfully

  /cart:
    post:
      summary: Create a new cart
      tags:
        - Cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCart'
      responses:
        '201':
          description: Checks if user exist and creates the Cart for it

  /cart/{cartId}:
    post:
      summary: Add items to a cart
      tags:
        - Cart
      parameters:
        - name: cartId
          in: path
          required: true
          schema:
            type: number
          description: The ID of the cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItems'
      responses:
        '200':
          description: Checks if items request are present and available in stock. Then adds Item to cart
    get:
      summary: Get cart details
      tags:
        - Cart
      parameters:
        - name: cartId
          in: path
          required: true
          schema:
            type: number
          description: The ID of the cart
      responses:
        '200':
          description: Cart details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CartDetails'

  /cart/{cartId}/checkout:
    post:
      summary: Checkout a cart
      tags:
        - Cart
      parameters:
        - name: cartId
          in: path
          required: true
          schema:
            type: number
          description: The ID of the cart
      responses:
        '200':
          description: Cart checked out successfully

  /orders:
    get:
      summary: Get all orders
      tags:
        - Orders
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

  /orders/{orderId}:
    get:
      summary: Get order by ID
      tags:
        - Orders
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: number
          description: The ID of the order
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

components:
  schemas:
    User:
      type: object
      properties:
        user_id:
          type: number
        username:
          type: string
        is_active:
          type: boolean
        email:
          type: string

    UserUpdate:
      type: object
      properties:
        username:
          type: string
        email:
          type: string

    Product:
      type: object
      properties:
        product_id:
          type: number
        price:
          type: number
        product_name:
          type: string
        description:
          type: string
        category:
          type: string
        stock:
          type: number
          
    ProductRequest:
      type: object
      properties:
        price:
          type: number
        product_name:
          type: string
        description:
          type: string
        category:
          type: string
        stock:
          type: number

    UserRegistration:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string

    CreateCart:
      type: object
      properties:
        user_id:
          type: number

    CartDetails:
      type: object
      properties:
        cart_id:
          type: number
        user_id:
          type: number
        username:
          type: string
        products:
          type: array
          items:
            $ref: '#/components/schemas/CartInfo'
        created_at:
          type: string
        updated_at:
          type: string

    CartInfo:
      type: object
      properties:
        product_id:
          type: number
        product_name:
          type: integer
        price:
          type: integer
        quantity:
          type: integer


    CartItems:
      type: object
      properties:
        products:
            type: array
            items:
              $ref: '#/components/schemas/CartItem'

    CartItem:
      type: object
      properties:
        product_id:
          type: number
        quantity:
          type: integer

    Order:
      type: object
      properties:
        order_id:
          type: number
        user_id:
          type: number
        username:
          type: string
        order_date:
          type: string
        order_amount:
          type: string
        products:
          type: array
          items:
            $ref: '#/components/schemas/CartInfo'

